generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ======================
 * Enums
 * ======================
 */
enum Role {
  SUPER_ADMIN
  MANAGER
  COORDINATOR
  PUBLIC
  ADMIN
  DRIVER
}

enum BusinessType {
  CARE
  TAXI
  EDUCATION
  DELIVERY
  SUPPORT
  OTHER
}

enum BusinessMembershipRole {
  ADMIN
  COORDINATOR
  MANAGER
  DRIVER
  OWNER
  DISPATCHER
}

enum BidStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum FeedbackType {
  NOTE
  COMPLAINT
}

enum AdvancedBookingVisibility {
  PRIVATE_TO_COMPANY
  LINK_ONLY
  PUBLIC
}

enum AdvancedBookingStatus {
  OPEN
  CLOSED
  ACCEPTED
  SCHEDULED
  COMPLETED
  CANCELED
  WON
  LOST
}

enum InstantBookingStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

/**
 * ======================
 * Core Models
 * ======================
 */

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  phone         String?
  password      String?
  role          Role      @default(PUBLIC)
  image         String?
  emailVerified DateTime?
  isApproved    Boolean   @default(false)

  driverOnboarded      Boolean @default(false)
  managerOnboarded     Boolean @default(false)
  coordinatorOnboarded Boolean @default(false)
  adminOnboarded       Boolean @default(false)

  // Self relation: manager ↔ drivers
  managerId String?
  manager   User?   @relation("ManagerDrivers", fields: [managerId], references: [id])
  drivers   User[]  @relation("ManagerDrivers")

  driver Driver? @relation("UserDriver")

  // Business link
  businessId String?
  business   Business? @relation("UserBusiness", fields: [businessId], references: [id])

  // Area link
  areaId String?
  area   Area?   @relation("UserArea", fields: [areaId], references: [id])

  // Relations
  bids                Bid[]                @relation("UserBids")
  feedback            TripFeedback[]
  invoices            Invoice[]
  memberships         BusinessMembership[] @relation("MembershipUser")
  verifiedMemberships BusinessMembership[] @relation("MembershipVerifier")
  schedules           RideSchedule[]       @relation("DriverSchedules")
  notifications       Notification[]
  incidents           Incident[]
  instantBookings     InstantBooking[]     @relation("CreatorInstantBookings")
  advancedBookings    AdvancedBooking[]    @relation("CreatorAdvancedBookings")
  houses              House[]


  adminOfBusiness         Business?        @relation("BusinessAdminUser")
  acceptedInstantBookings InstantBooking[] @relation("UserAcceptedInstant")
  passwordResetTokens     PasswordResetToken[] @relation("UserPasswordResetTokens")

  // Preferences
  postcode     String?
  radius       Int?
  capabilities String[]

  Account Account[]
  Session Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
}
// model ContactRequest {
//   id        String   @id @default(cuid())
//   name      String
//   email     String
//   phone     String?
//   subject   String
//   category  String   // general, support, booking, driver, business, complaint, feedback, partnership
//   message   String   @db.Text
//   status    String   @default("NEW") // NEW, READ, REPLIED, RESOLVED, ARCHIVED
  
//   // Audit fields
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
  
//   // Optional: Link to user if they're logged in
//   userId    String?
//   user      User?    @relation(fields: [userId], references: [id])
  
//   // Optional: Admin notes
//   adminNotes String? @db.Text
//   resolvedBy String?
//   resolvedAt DateTime?

//   @@index([status])
//   @@index([category])
//   @@index([createdAt])
// }

/**
 * ======================
 * NEW: Accessibility Profile (Shared)
 * ======================
 */
model AccessibilityProfile {
  id String @id @default(cuid())

  // Mobility & Physical
  wheelchairAccess       Boolean @default(false)
  doubleWheelchairAccess Boolean @default(false)
  highRoof               Boolean @default(false)
  seatTransferHelp       Boolean @default(false)
  mobilityAidStorage     Boolean @default(false)
  electricScooterStorage Boolean @default(false)

  // Passenger details
  passengerCount  Int     @default(0)
  wheelchairUsers Int     @default(0)
  ageOfPassenger  Int?
  carerPresent    Boolean @default(false)
  escortRequired  Boolean @default(false)

  // Sensory preferences
  quietEnvironment Boolean @default(false)
  noConversation   Boolean @default(false)
  noScents         Boolean @default(false)
  specificMusic    String? // e.g., "Classical", "No music", "Passenger choice"
  visualSchedule   Boolean @default(false)

  // Communication
  signLanguageRequired  Boolean @default(false)
  textOnlyCommunication Boolean @default(false)
  preferredLanguage     String?
  translationSupport    Boolean @default(false)

  // Special requirements
  assistanceRequired Boolean @default(false)
  assistanceAnimal   Boolean @default(false)
  familiarDriverOnly Boolean @default(false)
  femaleDriverOnly   Boolean @default(false)
  nonWAVvehicle      Boolean @default(false)

  // Health & safety
  medicationOnBoard  Boolean @default(false)
  medicalConditions  String?
  firstAidTrained    Boolean @default(false)
  conditionAwareness Boolean @default(false) // e.g., autism, dementia

  // Additional
  additionalNeeds String?

  // Relations (one-to-one)
  driver           Driver?          @relation("DriverAccessibility")
  advancedBooking  AdvancedBooking? @relation("AdvancedBookingAccessibility")
  instantBooking   InstantBooking?  @relation("InstantBookingAccessibility")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ======================
 * Driver Models (Split)
 * ======================
 */
model Driver {
  id     String @id @default(cuid())
  userId String @unique
  name   String
  user   User   @relation("UserDriver", fields: [userId], references: [id], onDelete: Cascade)

  // Vehicle info
  vehicleType String // e.g., Car, WAV, Minibus
  vehicleReg  String
  amenities   String[] // High roof, side step, etc.

  // Location & availability
  localPostcode String
  radiusMiles   Int
  baseLat Float?
  baseLng Float?
  phone         String

  // Approval status
  approved Boolean @default(false)

  // Relations
  accessibilityProfileId String              @unique
  accessibilityProfile   AccessibilityProfile @relation("DriverAccessibility", fields: [accessibilityProfileId], references: [id], onDelete: Cascade)

  compliance DriverCompliance? @relation("DriverComplianceRelation")

  instantBookings InstantBooking[] @relation("DriverInstantBookings")
  advancedBids    Bid[]            @relation("DriverBids")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([localPostcode, approved])
}

model DriverCompliance {
  id       String @id @default(cuid())
  driverId String @unique
  driver   Driver @relation("DriverComplianceRelation", fields: [driverId], references: [id], onDelete: Cascade)

  // License & registration (ALL REQUIRED - no optionals)
  ukDrivingLicence         Boolean
  licenceNumber            String  // ✅ Required for compliance
  localAuthorityRegistered Boolean

  // Checks & insurance (ALL REQUIRED)
  dbsChecked               Boolean
  publicLiabilityInsurance Boolean
  fullyCompInsurance       Boolean

  // Health & language (ALL REQUIRED)
  healthCheckPassed  Boolean
  englishProficiency Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Business {
  id       String  @id @default(cuid())
  type     String
  name     String
  phone    String?
  email    String?
  website  String?
  address1 String?
  city     String?
  postcode String?
  approved Boolean @default(false)

  // Admin account
  adminUserId String @unique
  adminUser   User   @relation("BusinessAdminUser", fields: [adminUserId], references: [id])

  // Staff & members
  memberships BusinessMembership[] @relation("MembershipBusiness")
  employees   User[]               @relation("UserBusiness")

  // Domain data
  housesAsBusiness        House[]           @relation(name: "HouseBusiness")
  housesAsCompany         House[]           @relation(name: "HouseCompany")
  driverInvites           DriverInvite[]
  incidents               Incident[]
  advancedBookings        AdvancedBooking[] @relation("BusinessAdvancedBookings")
  instantBookings         InstantBooking[]  @relation("BusinessInstantBookings")
  acceptedInstantBookings InstantBooking[]  @relation("BusinessAcceptedInstant")
  lat Float?
  lng Float?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessMembership {
  id         String                 @id @default(cuid())
  userId     String
  businessId String
  role       BusinessMembershipRole

  user     User     @relation("MembershipUser", fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation("MembershipBusiness", fields: [businessId], references: [id], onDelete: Cascade)

  // Verification
  dbsChecked         Boolean @default(false)
  insuranceChecked   Boolean @default(false)
  plInsuranceChecked Boolean @default(false)
  isVerified         Boolean @default(false)

  invitedAt  DateTime?
  verifiedAt DateTime?

  verifiedById String?
  verifiedBy   User?   @relation("MembershipVerifier", fields: [verifiedById], references: [id], onDelete: SetNull)

  verifyNotes String?

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([userId, businessId])
  @@index([businessId, role])
  @@index([businessId, isVerified])
  @@index([deletedAt])
}

model Area {
  id   String @id @default(cuid())
  name String @unique

  users User[]  @relation("UserArea")
  house House[]
}

model House {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(name: "HouseBusiness", fields: [businessId], references: [id], onDelete: Cascade)

  companyId String?
  company   Business? @relation(name: "HouseCompany", fields: [companyId], references: [id])

  label    String
  line1    String
  city     String
  postcode String
  notes    String?

  internalId String @unique
  pin        String
  loginName  String @unique

  incidents Incident[]
  residents Resident[]
  lat Float?
  lng Float?

  createdAt DateTime   @default(now())
  deletedAt DateTime?

  managerId String
  manager   User   @relation(fields: [managerId], references: [id], onDelete: Cascade)

  areaId String
  area   Area   @relation(fields: [areaId], references: [id])

  

  @@index([businessId, label])
  @@index([deletedAt])
}

model Resident {
  id        String   @id @default(cuid())
  initials  String   // e.g. "JD", "MS" - for invoicing/auditing
  name      String   // Display name only, not full legal name
  houseId   String
  house     House    @relation(fields: [houseId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ======================
 * Bookings (Updated)
 * ======================
 */
model AdvancedBooking {
  id          String @id @default(cuid())
  createdById String
  createdBy   User   @relation("CreatorAdvancedBookings", fields: [createdById], references: [id])

  businessId String?
  business   Business? @relation("BusinessAdvancedBookings", fields: [businessId], references: [id])

  pickupTime      DateTime
  returnTime      DateTime?
  pickupLocation  String
  dropoffLocation String
  initials        String[]

  // Accessibility (now via relation)
  accessibilityProfileId String               @unique
  accessibilityProfile   AccessibilityProfile @relation("AdvancedBookingAccessibility", fields: [accessibilityProfileId], references: [id], onDelete: Cascade)

  // Bidding
  visibility    AdvancedBookingVisibility @default(PRIVATE_TO_COMPANY)
  bidDeadline   DateTime?
  status        AdvancedBookingStatus     @default(OPEN)
  acceptedBidId String?                   @unique
  acceptedBid   Bid?                      @relation("AcceptedBid", fields: [acceptedBidId], references: [id], onDelete: SetNull)

  bids          Bid[]          @relation("AdvancedBookingBids")
  feedback      TripFeedback[]
  invoices      Invoice[]
  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  schedule RideSchedule?

  @@index([businessId, pickupTime])
  @@index([status, pickupTime])
  @@index([bidDeadline])
  @@index([deletedAt])
}

model InstantBooking {
  id String @id @default(cuid())

  createdById String
  createdBy   User   @relation("CreatorInstantBookings", fields: [createdById], references: [id], onDelete: Cascade)

  businessId String?
  business   Business? @relation("BusinessInstantBookings", fields: [businessId], references: [id], onDelete: Cascade)

  pickupTime      DateTime
  returnTime      DateTime?
  pickupLocation  String
  dropoffLocation String
  initials        String[]

  driverId String?
  driver   Driver? @relation("DriverInstantBookings", fields: [driverId], references: [id], onDelete: SetNull)

  // Accessibility (now via relation)
  accessibilityProfileId String               @unique
  accessibilityProfile   AccessibilityProfile @relation("InstantBookingAccessibility", fields: [accessibilityProfileId], references: [id], onDelete: Cascade)

  // Pricing (NEW)
  estimatedCostPence Int?
  finalCostPence     Int?
  distanceMiles      Float?
  durationMinutes    Int?

  // Acceptance
  acceptedAt           DateTime?
  acceptedByUserId     String?
  acceptedByUser       User?     @relation("UserAcceptedInstant", fields: [acceptedByUserId], references: [id], onDelete: SetNull)
  acceptedByBusinessId String?
  acceptedByBusiness   Business? @relation("BusinessAcceptedInstant", fields: [acceptedByBusinessId], references: [id], onDelete: SetNull)

  status InstantBookingStatus @default(PENDING)

  feedback      TripFeedback[]
  invoices      Invoice[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, pickupTime])
  @@index([driverId])
}

/**
 * ======================
 * Bids / Schedule / Notifications
 * ======================
 */
model Bid {
  id                String          @id @default(cuid())
  advancedBookingId String
  advancedBooking   AdvancedBooking @relation("AdvancedBookingBids", fields: [advancedBookingId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)

  amountCents  Int
  message      String?
  etaMinutes   Int?
  vehicleNotes String?
  validUntil   DateTime?
  status       BidStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driverId String
  driver   Driver @relation("DriverBids", fields: [driverId], references: [id])

  acceptedOnRide AdvancedBooking? @relation("AcceptedBid")
  notifications  Notification[]
  idempotencyKey String?          @unique
  deletedAt      DateTime?

  @@index([advancedBookingId, status, amountCents])
  @@index([userId, createdAt])
  @@index([deletedAt])
}

model RideSchedule {
  id                String          @id @default(cuid())
  advancedBookingId String          @unique
  advancedBooking   AdvancedBooking @relation(fields: [advancedBookingId], references: [id], onDelete: Cascade)

  driverId String
  driver   User   @relation("DriverSchedules", fields: [driverId], references: [id], onDelete: Cascade)

  startAt DateTime
  endAt   DateTime?
  notes   String?

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([driverId, startAt])
  @@index([deletedAt])
  @@index([startAt])
}

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type String

  advancedBookingId String?
  advancedBooking   AdvancedBooking? @relation(fields: [advancedBookingId], references: [id], onDelete: SetNull)

  instantBookingId String?
  instantBooking   InstantBooking? @relation(fields: [instantBookingId], references: [id], onDelete: SetNull)

  bidId String?
  bid   Bid?    @relation(fields: [bidId], references: [id], onDelete: SetNull)

  payload Json?
  readAt  DateTime?

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([userId, createdAt])
  @@index([deletedAt])
}

/**
 * ======================
 * Feedback / Invoices / Invites / Incidents
 * ======================
 */
model TripFeedback {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  advancedBookingId String?
  advancedBooking   AdvancedBooking? @relation(fields: [advancedBookingId], references: [id])
  instantBookingId  String?
  instantBooking    InstantBooking?  @relation(fields: [instantBookingId], references: [id])

  type     FeedbackType @default(NOTE)
  message  String
  resolved Boolean      @default(false)

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([deletedAt])
  @@index([userId, createdAt])
  @@index([advancedBookingId])
  @@index([instantBookingId])
}

model Invoice {
  id       String @id @default(cuid())
  driverId String
  driver   User   @relation(fields: [driverId], references: [id], onDelete: Cascade)

  advancedBookingId String?
  advancedBooking   AdvancedBooking? @relation(fields: [advancedBookingId], references: [id], onDelete: SetNull)
  instantBookingId  String?
  instantBooking    InstantBooking?  @relation(fields: [instantBookingId], references: [id], onDelete: SetNull)

  amountCents Int
  currency    String    @default("GBP")
  issuedAt    DateTime  @default(now())
  paid        Boolean   @default(false)
  paidAt      DateTime?
  notes       String?
  deletedAt   DateTime?

  @@index([deletedAt])
  @@index([driverId, issuedAt])
  @@index([advancedBookingId])
  @@index([instantBookingId])
}

model DriverInvite {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  email      String
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([businessId, email])
}

model Incident {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  houseId    String?
  house      House?   @relation(fields: [houseId], references: [id])

  time         DateTime
  type         String
  description  String
  emergency    Boolean
  actionsTaken String?
  followUp     Boolean
  image        String?
  evidenceUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ======================
 * NextAuth
 * ======================
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}