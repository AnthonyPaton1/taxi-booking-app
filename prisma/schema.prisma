generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  COORDINATOR
  MANAGER
  DRIVER
}

enum BidStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum FeedbackType {
  NOTE
  COMPLAINT
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  phone String? @unique
  role  Role    @default(DRIVER)

  // manager/driver relationship (optional)
  managerId String?
  manager   User?   @relation("ManagerDrivers", fields: [managerId], references: [id])
  drivers   User[]  @relation("ManagerDrivers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  rideRequests RideRequest[]  @relation("CreatorRides")
  bids         Bid[]
  autoBids     AutoBid[]
  feedback     TripFeedback[]
  invoices     Invoice[]
}

model RideRequest {
  id          String @id @default(cuid())
  createdById String
  createdBy   User   @relation("CreatorRides", fields: [createdById], references: [id])

  pickupTime       DateTime
  returnTime       DateTime?
  pickupLocation   String
  dropoffLocation  String
  wheelchairAccess Boolean   @default(false)
  highRoof         Boolean   @default(false)
  carerPresent     Boolean   @default(false)
  notes            String?

  distanceKm      Float? // optional pre-computed distance
  passengersName  String?
  additionalNeeds String?

  // bidding
  acceptedBidId String? @unique
  acceptedBid   Bid?    @relation("AcceptedBid", fields: [acceptedBidId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bids         Bid[]
  TripFeedback TripFeedback[]
  Invoice      Invoice[]

  @@index([createdById, pickupTime])
  @@index([pickupTime])
}

model Bid {
  id            String      @id @default(cuid())
  rideRequestId String
  rideRequest   RideRequest @relation(fields: [rideRequestId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  amountCents Int
  message     String?
  status      BidStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // reverse link to ride.acceptedBid
  acceptedOnRide RideRequest? @relation("AcceptedBid")

  @@index([rideRequestId, status, createdAt])
  @@index([userId, createdAt])
}

model AutoBid {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  minDistanceKm  Float @default(0)
  maxDistanceKm  Float
  minAmountCents Int   @default(0)
  maxAmountCents Int

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, active])
}

model TripFeedback {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  rideId String
  ride   RideRequest @relation(fields: [rideId], references: [id])

  type     FeedbackType @default(NOTE)
  message  String
  resolved Boolean      @default(false)

  createdAt DateTime @default(now())

  @@index([rideId])
  @@index([userId, createdAt])
}

model Invoice {
  id       String @id @default(cuid())
  driverId String
  driver   User   @relation(fields: [driverId], references: [id])

  rideId String?
  ride   RideRequest? @relation(fields: [rideId], references: [id])

  amountCents Int
  currency    String    @default("GBP")
  issuedAt    DateTime  @default(now())
  paid        Boolean   @default(false)
  paidAt      DateTime?
  notes       String?

  @@index([driverId, issuedAt])
  @@index([rideId])
}
